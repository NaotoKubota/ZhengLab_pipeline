
'''
Snakefile for ATAC-seq footprinting

Usage:
    snakemake -s Snakefile_footprinting_ATACseq --configfile <path to config.yaml> --cores <int> --use-singularity
'''

## DON'T CHANGE BELOW THIS LINE ##

workdir: config["workdir"]
samples = config["samples"]
group = config["groups"]

rule all:
    input:
        footprints_bw = expand("footpriting/TOBIAS/ATACorrect/{sample}/{sample}.sort.rmdup_footprints.bw", sample = samples + ["A", "B"]),
        bindetect_results = "footpriting/TOBIAS/BINDetect/bindetect_results.xlsx"

rule merge_peaks:
    container:
        "docker://quay.io/biocontainers/bedtools:2.24--1"
    input:
        expand("macs2/{sample}/{sample}_peaks.narrowPeak", sample = samples)
    output:
        "footpriting/merged_peaks.bed"
    shell:
        '''
        cat {input} | sort -k1,1 -k2,2n | bedtools merge -i stdin -d 1000 | grep -v chrM > {output}
        '''

rule merge_bam:
    wildcard_constraints:
        merge_group = "A|B"
    container:
        "docker://quay.io/biocontainers/samtools:1.18--h50ea8bc_1"
    input:
        bam = lambda wildcards: expand("bowtie2/{sample}.sort.rmdup.bam", sample = group[str(wildcards.merge_group)])
    output:
        bam = "bowtie2/{merge_group}.sort.rmdup.bam"
    threads:
        16
    benchmark:
        "benchmark/footprinting/bam_merge/{merge_group}.txt"
    log:
        "log/footprinting/bam_merge/{merge_group}.log"
    shell:
        '''
        samtools merge \
        -@ {threads} \
        -o {output.bam} \
        {input.bam} \
        > {log} 2>&1
        '''

rule ATACorrect:
    wildcard_constraints:
        sample = "|".join([re.escape(x) for x in samples] + ["A", "B"])
    container:
        "docker://quay.io/biocontainers/tobias:0.16.0--py38h24c8ff8_0"
    input:
        bam = "bowtie2/{sample}.sort.rmdup.bam",
        peaks = "footpriting/merged_peaks.bed"
    output:
        outdir = directory("footpriting/TOBIAS/ATACorrect/{sample}"),
        corrected_bw = "footpriting/TOBIAS/ATACorrect/{sample}/{sample}.sort.rmdup_corrected.bw"
    params:
        genome_fasta = config["genome_fasta"]
    threads:
        16
    benchmark:
        "benchmark/footprinting/ATACorrect/{sample}.txt"
    log:
        "log/footprinting/ATACorrect/{sample}.log"
    shell:
        '''
        TOBIAS ATACorrect \
        --bam {input.bam} \
        --genome {params.genome_fasta} \
        --peaks {input.peaks} \
        --outdir {output.outdir} \
        --cores {threads} \
        > {log} 2>&1
        '''

rule FootprintScores:
    wildcard_constraints:
        sample = "|".join([re.escape(x) for x in samples] + ["A", "B"])
    container:
        "docker://quay.io/biocontainers/tobias:0.16.0--py38h24c8ff8_0"
    input:
        corrected_bw = "footpriting/TOBIAS/ATACorrect/{sample}/{sample}.sort.rmdup_corrected.bw",
        peaks = "footpriting/merged_peaks.bed"
    output:
        footprints_bw = "footpriting/TOBIAS/ATACorrect/{sample}/{sample}.sort.rmdup_footprints.bw"
    threads:
        16
    benchmark:
        "benchmark/footprinting/FootprintScores/{sample}.txt"
    log:
        "log/footprinting/FootprintScores/{sample}.log"
    shell:
        '''
        TOBIAS FootprintScores \
        --signal {input.corrected_bw} \
        --regions {input.peaks} \
        --output {output.footprints_bw} \
        --cores {threads} \
        > {log} 2>&1
        '''

rule BINDetect:
    container:
        "docker://quay.io/biocontainers/tobias:0.16.0--py38h24c8ff8_0"
    input:
        bw_groupA = "footpriting/TOBIAS/ATACorrect/A/A.sort.rmdup_footprints.bw",
        bw_groupB = "footpriting/TOBIAS/ATACorrect/B/B.sort.rmdup_footprints.bw",
        peaks = "footpriting/merged_peaks.bed"
    output:
        outdir = directory("footpriting/TOBIAS/BINDetect"),
        bindetect_results = "footpriting/TOBIAS/BINDetect/bindetect_results.xlsx"
    params:
        cluster_motifs = config["cluster_motifs"],
        genome_fasta = config["genome_fasta"]
    threads:
        1000
    benchmark:
        "benchmark/footprinting/BINDetect.txt"
    log:
        "log/footprinting/BINDetect.log"
    shell:
        '''
        TOBIAS BINDetect \
        --motifs {params.cluster_motifs} \
        --signals {input.bw_groupB} {input.bw_groupA} \
        --genome {params.genome_fasta} \
        --peaks {input.peaks} \
        --outdir {output.outdir} \
        --cond_names Alternative Reference \
        --cores {threads} \
        > {log} 2>&1
        '''

## DON'T CHANGE ABOVE THIS LINE ##
